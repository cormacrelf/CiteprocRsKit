#!/usr/bin/env bash

set -euo pipefail

CLEAR='\033[0m'
RED='\033[0;31m'
DIR="$( cd "$( dirname "${BASH_SOURCE[0]}" )" >/dev/null 2>&1 && pwd )"
DIR="$( cd "$DIR/.." && pwd )"
cd "$DIR"

bail() {
  MESSAGE="$@"
  echo -e "${RED}failed: ${MESSAGE}${CLEAR}"
  exit 1
}

if ! command -v rustup &>/dev/null; then
  bail "missing rustup command"
fi

# install from rust-toolchain
rustup show &>/dev/null

if ! command -v gh &>/dev/null; then
  bail "missing gh command (try \$ brew install gh; gh auth)"
fi

# constants
DRAFT_TAG_999="v999.0.0-alpha.999"
BINARY_REPO="citeproc-rs/ffi-xcframework"

# variables
SKIP_BUILD=false
OVERWRITE_EXISTING_RELEASE=false
EXISTING_RELEASE=""
IS_DRAFT=false
CLEANUP_DRAFT=false
BINARY_BRANCH=master
FORCE_PUSH_BINARY=""
BINARY_PRERELEASE=""

help() {
  cat <<EOF
$0: package and release libciteproc_rs.a into an xcframework for macOS, iOS and the iOS simulator
    via github.com/$BINARY_REPO

  --skip-build                 Skips building the xcframework, assumes it exists in the target directory
  --binary-tag vX.X.X          Release with this tag => github.com/$BINARY_REPO/releases/tags/vX.X.X
  --draft                      Make a prerelease with tag $DRAFT_TAG_999, usable with \`env CITEPROC_RS_BINARY=draft swift build\`
  --cleanup-draft              Delete artifacts left by --draft
  --help                       Show this help.
EOF
  exit
}

parse_params() {
  while [[ "$#" > 0 ]]; do case $1 in
    --skip-build) SKIP_BUILD=true; shift;;
    # e.g. you have a draft already (untagged-...)
    --existing-release) OVERWRITE_EXISTING_RELEASE=true; EXISTING_RELEASE="$2"; shift 2;;
    --binary-tag) BINARY_TAG="$2"; shift 2;;
    --draft) IS_DRAFT=true; shift;;
    --cleanup-draft) IS_DRAFT=true; CLEANUP_DRAFT=true; shift;;
    --|--help) help;;
    *) bail "Unknown parameter passed: $1";;
  esac; done
  if $IS_DRAFT; then
    BINARY_BRANCH=draft
    FORCE_PUSH_BINARY="--force-with-lease"
    BINARY_TAG="$DRAFT_TAG_999"
    BINARY_PRERELEASE="--prerelease"
  fi
  if [ -z "$BINARY_TAG" ]; then bail "empty tag. provide one with --binary-tag TAG"; fi
}

parse_params $@

BUILD_DIR="$DIR/citeproc-rs/bindings/xcframework"
TARGET_DIR="$DIR/citeproc-rs/target/xcframework/release"

build() {
  set -euo pipefail
  (
    cd "$BUILD_DIR"
    env CONFIGURATION=release ./build.sh
  )
  # carthage build --use-xcframeworks --no-skip-current --verbose
  # see https://bugs.swift.org/browse/SR-14257, commment by @cormacrelf
  # `zip -y` is the key here, it preserves the Versions/Current (etc) symlinks inside the frameworks.
  # These otherwise cause `unzip` to fail and SwiftPM to give you "TSCBasic.StringError error 1".
  (cd "$TARGET_DIR" \
  && rm -f CiteprocRs.xcframework.zip \
  && zip -y -r CiteprocRs.xcframework.zip CiteprocRs.xcframework)
}

upload() {
  local RELEASE_TAG="$1"
  set -x
  gh release upload --repo "$BINARY_REPO" "$RELEASE_TAG" "$TARGET_DIR/CiteprocRs.xcframework.zip"
}

checksum () {
  set -x
  # SHORT_SHA=$(git rev-parse --short "$GITHUB_SHA")
  cd "$TARGET_DIR"
  touch Package.swift
  local CHECKSUM=$(swift package compute-checksum CiteprocRs.xcframework.zip)
  rm Package.swift
  echo $CHECKSUM
}

cleanup_draft() {
  set -x
  local BRANCH="draft"
  local TMP="$(mktemp -d)"
  trap "rm -rf -- $TMP" EXIT
  cd "$TMP"
  git clone https://github.com/$BINARY_REPO.git --branch master
  cd "$(echo $BINARY_REPO | xargs basename)"

  # https://stackoverflow.com/a/26961416
  git switch -C $BRANCH

  if $IS_DRAFT; then
    # delete the draft tags from the binary repo
    git push origin ":$DRAFT_TAG_999" || echo "no tag $DRAFT_TAG_999 on remote"
    git tag -d "$DRAFT_TAG_999" || echo "no tag $DRAFT_TAG_999 locally"
  fi
}

push_binary_repo_core() {
  set -x
  local TAG="$1"
  local BRANCH="$2"
  local ZIP_URL="$3"
  local ZIP_CHECKSUM="$4"
  local MSG_SHA="$5"
  local MSG_URL="$6"

  local TMP="$(mktemp -d)"
  trap "rm -rf -- $TMP" EXIT
  cd "$TMP"
  git clone https://github.com/$BINARY_REPO.git --branch master
  cd "$(echo $BINARY_REPO | xargs basename)"

  # https://stackoverflow.com/a/26961416
  git switch -C $BRANCH

  if $IS_DRAFT; then
    # delete the draft tags from the binary repo
    git push origin ":$DRAFT_TAG_999" || echo "no tag $DRAFT_TAG_999 on remote"
    git tag -d "$DRAFT_TAG_999" || echo "no tag $DRAFT_TAG_999 locally"
  fi

  cp -R "$DIR"/Scripts/BinaryPackage/* .
  sed \
    -e "s,XCFRAMEWORK_ZIP_URL,$ZIP_URL,i" \
    -e "s,XCFRAMEWORK_ZIP_CHECKSUM,$ZIP_CHECKSUM,i" \
    < "$DIR/Scripts/BinaryPackage/Package.swift" \
    > "./Package.swift"
  git add .
  git commit -m "release $TAG for $MSG_SHA" \
             -m "$MSG_URL"
  git tag -f -a -m "release $TAG for $MSG_SHA" $TAG
  echo $(pwd)
  git push $FORCE_PUSH_BINARY origin $BRANCH
  git push --force-with-lease --tags
  cd "$DIR"
}

push_binary_repo_v2() {
  set -x
  local CRS_SHA="$(cd "$DIR/citeproc-rs" && git rev-parse HEAD)"
  local CRS_SHA_SHORT="$(cd "$DIR/citeproc-rs" && git rev-parse --short HEAD)"

  local GIT_TAG="$1"
  local ZIP_URL="https://github.com/$BINARY_REPO/releases/download/$GIT_TAG/CiteprocRs.xcframework.zip"
  local ZIP_CHECKSUM="$CHECKSUM"
  local MSG_SHA="zotero/citeproc-rs commit $CRS_SHA_SHORT"
  local MSG_URL="https://github.com/zotero/citeproc-rs/tree/$CRS_SHA"

  push_binary_repo_core "$GIT_TAG" "$BINARY_BRANCH" "$ZIP_URL" "$ZIP_CHECKSUM" "$MSG_SHA" "$MSG_URL"
}

edit_release() {
  set -x
  local TAG="$1"
  local CHECKSUM="$2"
  local RELEASE=$(gh api /repos/$BINARY_REPO/releases/tags/$TAG -q '.url')
  local BODY=$(gh api /repos/$BINARY_REPO/releases/tags/$TAG -q '.body')
  local DL=$(gh api /repos/$BINARY_REPO/releases/tags/$TAG -q '.assets[] | select(.name == "CiteprocRs.xcframework.zip") | .browser_download_url')
  if ! (echo $BODY | grep -q $CHECKSUM); then
    echo "patching body"
    gh api -X PATCH $RELEASE -f "body=$BODY\n\nChecksum: $CHECKSUM"
  fi
  echo $DL
}

function binary_release_and_upload() {
  set -x
  local GIT_TAG="$1"

  # create a draft release, returns "untagged-$SOME_HASH"
  local DRAFT_RELEASE_TAG=""
  if $OVERWRITE_EXISTING_RELEASE; then
    DRAFT_RELEASE_TAG="$EXISTING_RELEASE"
  else
    DRAFT_RELEASE_TAG=$(gh release create \
      "$BINARY_TAG" \
      --repo "$BINARY_REPO" \
      --draft \
      $BINARY_PRERELEASE \
      -n "Checksum: $CHECKSUM" \
      | xargs basename)
  fi

  # upload the zip file there
  upload "$DRAFT_RELEASE_TAG"

  # push the binary repo with the url and the checksum already in it.
  # that means for a short moment, the url referred to will point to a 404.
  push_binary_repo_v2 "$BINARY_TAG"

  local DRAFT_RELEASE_URL="/repos/$BINARY_REPO/releases/tags/$DRAFT_RELEASE_TAG"

  local RELEASE_ID=$(gh api "/repos/$BINARY_REPO/releases/tags/$DRAFT_RELEASE_TAG" -q ".id")
  echo "publishing release with release_id=$RELEASE_ID"

  # publish the draft release and set its tag name to be a real tag
  # see ZIP_URL above
  local REAL_ZIP_URL=$(gh api -X PATCH "/repos/$BINARY_REPO/releases/$RELEASE_ID" -F 'draft=false' -F "tag_name=$GIT_TAG" -q '.assets[] | .browser_download_url')
  set +x
  local GUESSED_ZIP_URL="https://github.com/$BINARY_REPO/releases/download/$GIT_TAG/CiteprocRs.xcframework.zip"

  if ! [ "$REAL_ZIP_URL" = "$GUESSED_ZIP_URL" ]; then
    echo "   real zip url: $REAL_ZIP_URL"
    echo "guessed zip url: $GUESSED_ZIP_URL"
    bail "real zip url did not match guessed"
  fi

}

if $IS_DRAFT; then
  gh release delete --repo "$BINARY_REPO" "$BINARY_TAG" || echo "no draft release to delete; continuing"
fi

if $CLEANUP_DRAFT; then
  cleanup_draft
else
  if $SKIP_BUILD && [[ -f "$TARGET_DIR/CiteprocRs.xcframework.zip" ]]; then
    echo -n
  else
    build
  fi

  CHECKSUM=$(checksum)

  binary_release_and_upload "$BINARY_TAG"
fi

